daemon off;

# I'll explain why we only have 1 worker process later
worker_processes 1;
error_log /dev/stdout info;

include /usr/share/nginx/modules/*.conf;

events {
    use epoll;
    worker_connections 1024;
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" $request_time';
    access_log /dev/stdout combined;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    server {
        listen ${HTTP_PORT};
        server_name _;
        expires -1d;
	
	location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /opt/data;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
        }

	location /live {
           alias /opt/data/hls;
	   types {
              application/vnd.apple.mpegurl m3u8;
              video/mp2t ts;
           }
           add_header Cache-Control no-cache;
           add_header Access-Control-Allow-Origin *;
	   
	   location ~ .+\.ts$ {
	   	# MPEG-TS segments can be cached upstream indefinitely
            	expires max;
	   }
	}
    }
}

rtmp {
    server {
        listen 1935;

        application app {
            live on;

            # Don't allow RTMP playback
            deny play all;
	    
            # Push the stream to the local HLS application
            push rtmp://127.0.0.1:1935/hls;	    

	        on_publish http://127.0.0.1:1323/rtmp/create-stream;
	        on_publish_done http://127.0.0.1:1323/rtmp/delete-stream;
        }

      	application hls {
      	    live on;

	    allow publish 127.0.0.1;
            deny publish all;
            deny play all;
      	    
	    # Package streams as HLS
            hls on;
            hls_path /opt/data/hls;
            hls_nested on;
	    hls_fragment_naming system;
	}
    }
}

